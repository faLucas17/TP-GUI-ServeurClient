package broadcast;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;


/**
 * Classe du serveur Broadcast
 * @author KML-CODE
 */
public class ServeurBroadcastGUI extends javax.swing.JFrame {
    
    /**
     * Creates new form ServeurBroadcastGUI
     */
    public ServeurBroadcastGUI() {
        initComponents();
        serverState = new JProgressBar();
        serverState.setIndeterminate(true);
        serverState.setString("Running");
        serverState.setVisible(false);
        javax.swing.GroupLayout serverStatePanelLayout = new javax.swing.GroupLayout(serverStatePanel);
        serverStatePanel.setLayout(serverStatePanelLayout);
        serverStatePanelLayout.setHorizontalGroup(
            serverStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serverStatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        serverStatePanelLayout.setVerticalGroup(
            serverStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverStatePanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(serverState, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
       
        model = new DefaultListModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    listCLients = new javax.swing.JList();
    jPanel2 = new javax.swing.JPanel();
    jButton1 = new javax.swing.JButton();
    jButton2 = new javax.swing.JButton();
    jButton3 = new javax.swing.JButton();
    ipTF = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();
    serverStatePanel = new javax.swing.JPanel();
    portTF = new javax.swing.JTextField();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenu2 = new javax.swing.JMenu();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Serveur Broadcast");
    setResizable(false);

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste des clients"));

    jScrollPane1.setViewportView(listCLients);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1)
        .addContainerGap())
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Control", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 12))); // NOI18N
    jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseEntered(java.awt.event.MouseEvent evt) {
        jPanel2MouseEntered(evt);
      }
    });

    jButton1.setBackground(new java.awt.Color(13, 188, 8));
    jButton1.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jButton1.setText("Start");
    jButton1.setToolTipText("Démarrer le serveur");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    jButton2.setBackground(new java.awt.Color(243, 25, 25));
    jButton2.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jButton2.setText("Stop");
    jButton2.setToolTipText("Arrêter le serveur");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton2ActionPerformed(evt);
      }
    });

    jButton3.setBackground(new java.awt.Color(240, 221, 24));
    jButton3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jButton3.setText("Reset");
    jButton3.setToolTipText("");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton3ActionPerformed(evt);
      }
    });

    ipTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    ipTF.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Server IP", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 12))); // NOI18N
    ipTF.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseEntered(java.awt.event.MouseEvent evt) {
        ipTFMouseEntered(evt);
      }
    });

    jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabel1.setText("Serveur");

    serverStatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Server state", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 12))); // NOI18N

    javax.swing.GroupLayout serverStatePanelLayout = new javax.swing.GroupLayout(serverStatePanel);
    serverStatePanel.setLayout(serverStatePanelLayout);
    serverStatePanelLayout.setHorizontalGroup(
      serverStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 98, Short.MAX_VALUE)
    );
    serverStatePanelLayout.setVerticalGroup(
      serverStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 86, Short.MAX_VALUE)
    );

    portTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    portTF.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Server Port", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 12))); // NOI18N
    portTF.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseEntered(java.awt.event.MouseEvent evt) {
        portTFMouseEntered(evt);
      }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
        .addGap(20, 20, 20)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jButton3)
          .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addComponent(ipTF, javax.swing.GroupLayout.Alignment.TRAILING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
      .addComponent(serverStatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(portTF)
    );

    jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3});

    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(ipTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(portTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButton3)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(serverStatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, jButton3});

    jMenu1.setText("File");
    jMenuBar1.add(jMenu1);

    jMenu2.setText("Edit");
    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents
    
    /** ******************************************SERVER METHODE******************************************* **/
    
    /**
	 * Server class, have a starter main methode to begin runing.
	 * @author KML-CODE
	*/
     static ServerSocket socketServeur ;
    /**
     * Server accesible port - Port de connexion du serveur
     */
    final static int port = 9632;
    /**
     * Number of users in chat list - nombre de client dans la liste de discussion
     */
     static int nbrClt =0;
    /**
     * List of users out printer for broadcast. Max 10 users.
     */
     static PrintWriter[] outs = new PrintWriter[10];
     
     
    /**
     * Start the user acivities thread
     * @param socketClient is The user socket created on accept from server
     */
     private synchronized  static void servirClient(Socket socketClient) {
       // System.out.println("servirClient > Traitement de la connexion en cours...");
        nbrClt++;
        
        new Thread(new Runnable() {
                PrintWriter out = null;
                    BufferedReader in =null;
                public void run(){
                    try {
                        in=new BufferedReader(new InputStreamReader(socketClient.getInputStream()));
                        out = new PrintWriter(socketClient.getOutputStream(), true);
                        //enregistrement du client dans le tableau des clients connectés
                        outs[nbrClt-1] = out;
                        //out.println(nbrClt);
                        recevoir();
                        
                        
                       } catch (IOException ex) {
                        //Logger.getLogger(Serveur.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, "Client déconnecté !!!", "Connexion", JOptionPane.WARNING_MESSAGE);
                    }
                }
/**
 * Receive message send by the current client - reception des messages envoyé par le client
 * @throws IOException 
 */
            private synchronized  void recevoir() throws IOException {
                // System.out.println("Lecture des messages client");
                
                 Thread t= new Thread(
                    new Runnable() {
                        public void run(){
                            
                            String m = "";
                            Scanner sc ;
                            try {
                            ServeurBroadcastGUI.model.addElement(in.readLine());
                            ServeurBroadcastGUI.listCLients.setModel(model);
                            } catch (IOException ex) {
                                    JOptionPane.showMessageDialog(null, "Client déconnecté");
                                    //Logger.getLogger(Serveur.class.getName()).log(Level.SEVERE, null, ex);
                                    
                                }
                            while(true){//écoute active pour recevoir les messages
                                try {
                                   if(in.ready()){
                                       m = in.readLine();
                                       if(!m.isEmpty()){
                                            sc = new Scanner(m);
                                            if(!sc.next().equals(""))if(sc.hasNext())
                                            diffuser(m);//System.out.println(m);
                                       }
                                   }
                                  else Thread.sleep(1000);
                                   
                                } catch (InterruptedException | IOException ex) {
                                    JOptionPane.showMessageDialog(null, "Client déconnecté","",2);
                                    //Logger.getLogger(Serveur.class.getName()).log(Level.SEVERE, null, ex);
                                    break;
                                }
                            }
                            //System.out.println("Fin de la lecture des messages client");
                        }
                    });
                t.start();
            }
/**
 * Send message to the current client and the other one who are connected: this is the broadcast
 * Diffusion des messages vers tous les clients connectés, c'est l'éffet broadcast
 * @throws IOException 
 */
            
            public void diffuser(String m){
                
                //System.out.println("Lancement de la diffusion");
                for (int i = 0; i < nbrClt; i++) {
                try{ outs[i].println(m);   }catch(Exception ex){}
                }
            }
            
          },"Service Client N°"+nbrClt).start();
        
    }
    /* Démarrer le serveur - start server application */
    public synchronized static void startServer() {
        try{
            //socketServeur = new ServerSocket(port);
            socketServeur = new ServerSocket(port,100,InetAddress.getLocalHost());
            //accepter tant qu'il y a un client qui demande de connexion
            while (true) {servirClient(socketServeur.accept());}
        }catch (IOException e) {System.err.println("Il y a déjà un serveur sur le port "+port);}
    }
    
    /********************************SERVER METHODE END**********************************/
    /* Start server action - Bouton de démarrage du serveur */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       jButton1.setEnabled(false);
       new Thread(new Runnable() {public void run() {startServer();}}).start();
       serverState.setVisible(true);
       jButton1.setBackground(new java.awt.Color(0, 153, 51)); 

    }//GEN-LAST:event_jButton1ActionPerformed
	
	/* Server exit action - Bouton de ferméture du serveur */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed
	/* Actualise l'IP du serveur - update server IP */
    private void ipTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ipTFMouseEntered
		try{ServeurBroadcastGUI.ipTF.setText(socketServeur.getInetAddress().getHostAddress());
		}catch(Exception ex){
			ServeurBroadcastGUI.ipTF.setText("indéfinit");
		}
    }//GEN-LAST:event_ipTFMouseEntered

    private void jPanel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseEntered
      if("indéfinit".equals(ServeurBroadcastGUI.ipTF.getText()))ServeurBroadcastGUI.ipTF.setText("");  
      if("indéfinit".equals(ServeurBroadcastGUI.portTF.getText()))ServeurBroadcastGUI.portTF.setText("");  
    }//GEN-LAST:event_jPanel2MouseEntered

    private void portTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_portTFMouseEntered
     try {  portTF.setText(""+
               socketServeur.getLocalPort());
       }catch(Exception ex){
           portTF.setText("indéfinit");
       }
        
    }//GEN-LAST:event_portTFMouseEntered

  private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

  }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(ServeurBroadcastGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServeurBroadcastGUI().setVisible(true);
            }
        });
    }
    public static DefaultListModel model;
    private JProgressBar serverState;

  // Variables declaration - do not modify//GEN-BEGIN:variables
  public static javax.swing.JTextField ipTF;
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JButton jButton3;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane1;
  public static javax.swing.JList listCLients;
  public static javax.swing.JTextField portTF;
  private javax.swing.JPanel serverStatePanel;
  // End of variables declaration//GEN-END:variables
}