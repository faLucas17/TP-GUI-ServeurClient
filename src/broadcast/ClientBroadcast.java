package broadcast;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Scanner;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * Class client du serveur Broadcast - Client part of project
 * @author KML-CODE
 */

public class ClientBroadcast extends javax.swing.JFrame {
  /**
   * Port d'écoute du serveur
   */
    final static int port = 9632;
    Socket clientSocket;
    static BufferedReader in;
    PrintWriter out;
    private  DefaultListModel model;
    private boolean isConnected = false;
    
    /**
     * Creates new form Client
     */
    public ClientBroadcast() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

	jPanel1 = new javax.swing.JPanel();
	jSplitPane1 = new javax.swing.JSplitPane();
	jPanel3 = new javax.swing.JPanel();
	jLabel4 = new javax.swing.JLabel();
	ipTF = new javax.swing.JTextField();
	portTF = new javax.swing.JTextField();
	jPanel4 = new javax.swing.JPanel();
	jLabel5 = new javax.swing.JLabel();
	jSeparator1 = new javax.swing.JSeparator();
	jScrollPane1 = new javax.swing.JScrollPane();
	messageED = new javax.swing.JEditorPane();
	envoyerBT = new javax.swing.JButton();
	jScrollPane3 = new javax.swing.JScrollPane();
	messageEchange = new javax.swing.JList();
	jPanel2 = new javax.swing.JPanel();
	jToggleButton1 = new javax.swing.JToggleButton();
	jTextField1 = new javax.swing.JTextField();
	jPasswordField1 = new javax.swing.JPasswordField();
	jLabel1 = new javax.swing.JLabel();
	jLabel2 = new javax.swing.JLabel();
	jLabel3 = new javax.swing.JLabel();
	statutLB = new javax.swing.JLabel();
	statutLB1 = new javax.swing.JLabel();
	jMenuBar1 = new javax.swing.JMenuBar();
	jMenu1 = new javax.swing.JMenu();
	jMenuItem2 = new javax.swing.JMenuItem();
	jMenu2 = new javax.swing.JMenu();
	jMenuItem3 = new javax.swing.JMenuItem();
	jMenuItem4 = new javax.swing.JMenuItem();

	setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
	setTitle("Client Broadcst");
	setMinimumSize(null);

	jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
	jPanel3.setMinimumSize(new java.awt.Dimension(150, 500));
	jPanel3.setPreferredSize(new java.awt.Dimension(120, 508));

	jLabel4.setBackground(new java.awt.Color(153, 153, 153));
	jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	jLabel4.setText("Serveur");
	jLabel4.setOpaque(true);

	ipTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
	ipTF.setBorder(javax.swing.BorderFactory.createTitledBorder("IP"));
	ipTF.addMouseListener(new java.awt.event.MouseAdapter() {
	  public void mouseEntered(java.awt.event.MouseEvent evt) {
		ipTFMouseEntered(evt);
	  }
	});

	portTF.setHorizontalAlignment(javax.swing.JTextField.CENTER);
	portTF.setText("9632");
	portTF.setToolTipText("");
	portTF.setBorder(javax.swing.BorderFactory.createTitledBorder("Port"));
	portTF.addMouseListener(new java.awt.event.MouseAdapter() {
	  public void mouseEntered(java.awt.event.MouseEvent evt) {
		portTFMouseEntered(evt);
	  }
	});

	javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
	jPanel3.setLayout(jPanel3Layout);
	jPanel3Layout.setHorizontalGroup(
	  jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	  .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	  .addComponent(ipTF, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
	  .addComponent(portTF)
	);
	jPanel3Layout.setVerticalGroup(
	  jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	  .addGroup(jPanel3Layout.createSequentialGroup()
		.addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
		.addGap(29, 29, 29)
		.addComponent(ipTF, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
		.addComponent(portTF, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
		.addContainerGap(286, Short.MAX_VALUE))
	);

	jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ipTF, portTF});

	jSplitPane1.setLeftComponent(jPanel3);

	jPanel4.setBackground(new java.awt.Color(255, 255, 255));
	jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
	jPanel4.setMaximumSize(new java.awt.Dimension(700, 700));

	jLabel5.setBackground(new java.awt.Color(153, 153, 153));
	jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	jLabel5.setText("Messages échangés");
	jLabel5.setOpaque(true);

	jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
	jScrollPane1.setOpaque(false);

	messageED.addCaretListener(new javax.swing.event.CaretListener() {
	  public void caretUpdate(javax.swing.event.CaretEvent evt) {
		messageEDCaretUpdate(evt);
	  }
	});
	jScrollPane1.setViewportView(messageED);

	envoyerBT.setText("Envoyer");
	envoyerBT.addActionListener(new java.awt.event.ActionListener() {
	  public void actionPerformed(java.awt.event.ActionEvent evt) {
		envoyerBTActionPerformed(evt);
	  }
	});

	jScrollPane3.setViewportView(messageEchange);

	javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
	jPanel4.setLayout(jPanel4Layout);
	jPanel4Layout.setHorizontalGroup(
	  jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	  .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	  .addComponent(jSeparator1)
	  .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
	  .addGroup(jPanel4Layout.createSequentialGroup()
		.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
		.addGap(8, 8, 8)
		.addComponent(envoyerBT, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
	);
	jPanel4Layout.setVerticalGroup(
	  jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	  .addGroup(jPanel4Layout.createSequentialGroup()
		.addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		.addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		.addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		.addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
		  .addComponent(jScrollPane1)
		  .addComponent(envoyerBT, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
		.addGap(10, 10, 10))
	);

	jSplitPane1.setRightComponent(jPanel4);

	jPanel2.setBackground(new java.awt.Color(204, 204, 255));
	jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

	jToggleButton1.setText("Connexion");
	jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
	  public void actionPerformed(java.awt.event.ActionEvent evt) {
		jToggleButton1ActionPerformed(evt);
	  }
	});

	jPasswordField1.setToolTipText("Mot de passe");
	jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
	  public void actionPerformed(java.awt.event.ActionEvent evt) {
		jPasswordField1ActionPerformed(evt);
	  }
	});

	jLabel1.setText("Nom");

	jLabel2.setText("Passe");

	jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
	jLabel3.setText("Client");
	jLabel3.setAutoscrolls(true);

	statutLB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	statutLB.setText("Statut");
	statutLB.setOpaque(true);

	statutLB1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	statutLB1.setLabelFor(statutLB.getLabelFor());
	statutLB1.setText("Statut");
	statutLB1.setOpaque(true);

	javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
	jPanel2.setLayout(jPanel2Layout);
	jPanel2Layout.setHorizontalGroup(
	  jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	  .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
		.addContainerGap()
		.addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
		.addComponent(statutLB1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		.addComponent(statutLB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		.addGap(27, 27, 27)
		.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		.addComponent(jTextField1)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		.addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		.addComponent(jPasswordField1)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		.addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		.addContainerGap())
	);
	jPanel2Layout.setVerticalGroup(
	  jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	  .addGroup(jPanel2Layout.createSequentialGroup()
		.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(jPanel2Layout.createSequentialGroup()
			  .addGap(20, 20, 20)
			  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
				.addComponent(statutLB1)
				.addComponent(statutLB)))
			.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
			  .addContainerGap()
			  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
				.addComponent(jToggleButton1)
				.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addComponent(jLabel1)
				.addComponent(jLabel2))))
		  .addGroup(jPanel2Layout.createSequentialGroup()
			.addContainerGap()
			.addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
		.addContainerGap())
	);

	jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, jPasswordField1, jTextField1, jToggleButton1, statutLB, statutLB1});

	javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
	jPanel1.setLayout(jPanel1Layout);
	jPanel1Layout.setHorizontalGroup(
	  jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	  .addGroup(jPanel1Layout.createSequentialGroup()
		.addContainerGap()
		.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
		  .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		  .addComponent(jSplitPane1))
		.addContainerGap())
	);
	jPanel1Layout.setVerticalGroup(
	  jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	  .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
		.addContainerGap()
		.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
		.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
		.addComponent(jSplitPane1)
		.addContainerGap())
	);

	jMenu1.setText("Options");

	jMenuItem2.setText("Déconnexion");
	jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
	  public void actionPerformed(java.awt.event.ActionEvent evt) {
		jMenuItem2ActionPerformed(evt);
	  }
	});
	jMenu1.add(jMenuItem2);

	jMenuBar1.add(jMenu1);

	jMenu2.setText("?");

	jMenuItem3.setText("à propos");
	jMenu2.add(jMenuItem3);

	jMenuItem4.setText("aide");
	jMenu2.add(jMenuItem4);

	jMenuBar1.add(jMenu2);

	setJMenuBar(jMenuBar1);

	javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	getContentPane().setLayout(layout);
	layout.setHorizontalGroup(
	  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	  .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	);
	layout.setVerticalGroup(
	  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	  .addGroup(layout.createSequentialGroup()
		.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		.addGap(0, 0, 0))
	);

	pack();
  }// </editor-fold>//GEN-END:initComponents
	/*bouton envoyer - send message aaction*/ 
	private void envoyerBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envoyerBTActionPerformed
		  try{if(isConnected){
			  if(messageED.getText().isEmpty()){envoyerBT.setEnabled(false);return;}
			 envoyerBT.setEnabled(true);
			 Thread envoyer = new Thread(new Runnable() {
				String msg=" [Vide] ";
				@Override
				public void run() {
				  out.println(jTextField1.getText()+" >> "+messageED.getText());
				  out.flush();
				  messageED.setText("");
			 }
		 });
		 envoyer.start();
		}
		else envoyerBT.setEnabled(!true);    
		  }catch(Exception ex){}
	}//GEN-LAST:event_envoyerBTActionPerformed
	/*bouton de connexion - Connection button */
	private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
		
		if(jTextField1.getText().isEmpty() | jPasswordField1.getText().isEmpty()){
			JOptionPane.showMessageDialog(this,"Option de connexion \"vide\" invalide !!!","Connexion", 0);
			return;
		}
		initConnection();
		try{portTF.setText(clientSocket.getLocalPort()+"");}catch(Exception e){}
		/*dès la connexion un thread écoute les échanges - listning for messages*/
		Thread recevoir =new Thread(new Runnable(){
			@Override
			public void run(){
				String msg, sender,senderMessage;
				Scanner sc ;
				try {
				 while(true){
					if(in.ready()){
						msg = in.readLine();//chaque message commence par le nom de l'expediteur - messages are started by sender name
						sc = new Scanner(msg);
						sender = sc.next();
						senderMessage = sc.nextLine();
						if(sender.equalsIgnoreCase(jTextField1.getText())){
							 msg = "Vous"+senderMessage;
						}else{
							msg = sender+senderMessage;
						}
						
						model.addElement(msg);
						messageEchange.setModel(model);
					}
				 }
			   } catch (IOException e) {
				   System.err.println("La connexion est coupé > "+e.getLocalizedMessage());
			   }
			}
		});
	recevoir.start();      
	}//GEN-LAST:event_jToggleButton1ActionPerformed

	private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
		try{if(!jTextField1.getText().equals("") 
				&& !jPasswordField1.getText().equals(""))
		   jToggleButton1.setEnabled(true);
		else jToggleButton1.setEnabled(!true);
		}catch(Exception ex){}
	}//GEN-LAST:event_jPasswordField1ActionPerformed

	/*Active le bouton Envoyer si la zone de saisie n'est pas vide - check and set active send button*/
	private void messageEDCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_messageEDCaretUpdate
	   try{ if(messageED.getText().isEmpty()){
			envoyerBT.setEnabled(false); 
			return;
		}
		envoyerBT.setEnabled(isConnected);   
		}catch(Exception ex){}
	}//GEN-LAST:event_messageEDCaretUpdate

	private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
	  try{
		in.close();
		out.close();
		clientSocket.close();
	  }catch(IOException ex){}
	  finally{JOptionPane.showMessageDialog(null, "Vous êtes connecté.");}
	  
	
	}//GEN-LAST:event_jMenuItem2ActionPerformed

	/*Update client port in mouse event - actualise le port du client*/
	private void portTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_portTFMouseEntered
		// TODO add your handling code here:
	   try{ portTF.setText(clientSocket.getLocalPort()+"");
		//System.out.println(clientSocket.getLocalAddress().getHostName());
		}catch(Exception ex){}
	}//GEN-LAST:event_portTFMouseEntered
	
	private void ipTFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ipTFMouseEntered
		// TODO add your handling code here:
	   try{ ipTF.setText(clientSocket.getLocalAddress().getHostAddress());
	   }catch(Exception ex){}
	}//GEN-LAST:event_ipTFMouseEntered

										   
/**
 *Init connection dependencies and set server status for user tamplate
 */
	private synchronized void initConnection() {
		String addr;int p;
			model = new DefaultListModel();
		   try { if(ipTF.getText().isEmpty())addr = InetAddress.getLocalHost().getHostName();
				else addr = ipTF.getText();
				try{
					if((p=Integer.parseInt(portTF.getText()))>0)
					clientSocket = new Socket(addr,Integer.parseInt(portTF.getText()));
					else clientSocket = new Socket(addr,port);
				}catch(Exception ex){clientSocket = new Socket(addr,port);}
			
			out = new PrintWriter(clientSocket.getOutputStream());
			out.println(jTextField1.getText());
			in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
			 jToggleButton1.setEnabled(!true);
			 envoyerBT.setEnabled(isConnected);
			 isConnected = true;
	   } catch (IOException ex) {
		   isConnected = !true;
		   statutLB.setText("Déconnecté");
		   JOptionPane.showMessageDialog(null,"impossible de se connecter au serveur\n"+ex.getLocalizedMessage());
		   jToggleButton1.setEnabled(true);
		   return;
	   }
	   statutLB.setText("Connecté");     
	   
	}
	
	/**
	 * Getting start the user template - démarre l'interface client
	 * @param args the command line arguments Nimbus look and feel
	 */
	public static void startClient(){
		System.out.println("Thread > "+Thread.currentThread().getName());
	/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ClientBroadcast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} 
		//</editor-fold>
		
		
		/* Create and display the Client form on a awt invoker event queue*/
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
			   new ClientBroadcast().setVisible(true);                
			}
		});
	}
	
	/**
	 * This is the main of client template
	 * @param args 
	 */
	public static void main(String args[]) {startClient(); }
	
	
	
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton envoyerBT;
  private javax.swing.JTextField ipTF;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JMenuItem jMenuItem4;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPasswordField jPasswordField1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JSplitPane jSplitPane1;
  private static javax.swing.JTextField jTextField1;
  private javax.swing.JToggleButton jToggleButton1;
  private static javax.swing.JEditorPane messageED;
  private static javax.swing.JList messageEchange;
  private javax.swing.JTextField portTF;
  protected static javax.swing.JLabel statutLB;
  protected static javax.swing.JLabel statutLB1;
  // End of variables declaration//GEN-END:variables
}
